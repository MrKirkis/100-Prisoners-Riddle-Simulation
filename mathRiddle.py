import random
from colorama import Fore, Style, init
import sys

init(autoreset=True)

class DualOutput:
    def __init__(self, filename):
        self.terminal = sys.stdout
        self.log = open(filename, "w", encoding="utf-8")

    def write(self, message):
        self.terminal.write(message)
        # –£–¥–∞–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã –¥–ª—è —Ñ–∞–π–ª–∞
        clean_message = message
        for code in [Fore.RED, Fore.GREEN, Fore.YELLOW, Fore.BLUE, Fore.MAGENTA, Fore.CYAN, Style.RESET_ALL]:
            clean_message = clean_message.replace(code, '')
        self.log.write(clean_message)

    def flush(self):
        self.terminal.flush()
        self.log.flush()

def full_detailed_simulation():
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥
    original_stdout = sys.stdout
    sys.stdout = DualOutput("prisoners_simulation.log")
    
    try:
        num_prisoners = 100
        max_attempts = 50
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —è—â–∏–∫–æ–≤
        boxes = random.sample(range(1, num_prisoners + 1), num_prisoners)
        
        # –í—ã–≤–æ–¥ –í–°–ï–• —è—â–∏–∫–æ–≤
        print(f"\n{Fore.YELLOW}‚ñÑ –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —è—â–∏–∫–æ–≤ (–Ω–æ–º–µ—Ä: —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ):{Style.RESET_ALL}")
        for i in range(0, num_prisoners, 10):
            chunk = boxes[i:i+10]
            print(' | '.join(f"{i+k+1:3d}: {Fore.CYAN}{chunk[k]:3d}{Style.RESET_ALL}" for k in range(len(chunk))))
        
        print(f"\n{Fore.MAGENTA}‚ñÑ‚ñÑ‚ñÑ –ù–∞—á–∞–ª–æ —Å–∏–º—É–ª—è—Ü–∏–∏ (100 –∑–∞–∫–ª—é—á—ë–Ω–Ω—ã—Ö, 50 –ø–æ–ø—ã—Ç–æ–∫) ‚ñÑ‚ñÑ‚ñÑ{Style.RESET_ALL}")
        stats = {
            "success": [],
            "fail_list": [],
            "max_length": 0,
            "min_length": float('inf'),
            "paths": {}
        }

        for prisoner in range(1, num_prisoners + 1):
            current_box = prisoner
            path = []
            found = False
            
            print(f"\n{Fore.BLUE}‚ñ† –ó–∞–∫–ª—é—á—ë–Ω–Ω—ã–π {prisoner:3d}:{Style.RESET_ALL}")
            for attempt in range(1, max_attempts + 1):
                number_in_box = boxes[current_box - 1]
                path.append(f"{current_box}‚Üí{number_in_box}")
                
                print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt:2d}: –Ø—â–∏–∫ {current_box:3d} ‚Üí {number_in_box:3d}", end="")
                
                if number_in_box == prisoner:
                    found = True
                    path_length = len(path)
                    stats["success"].append(path_length)
                    stats["max_length"] = max(stats["max_length"], path_length)
                    stats["min_length"] = min(stats["min_length"], path_length)
                    stats["paths"][prisoner] = path
                    print(f" {Fore.GREEN}‚òÖ –ù–ê–ô–î–ï–ù–û!{Style.RESET_ALL} (–ø—É—Ç—å: {path_length} —à–∞–≥–æ–≤)")
                    print(f"   –ü–æ–ª–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç: {' ‚Üí '.join(path)}")
                    break
                print()  # –ü–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
                current_box = number_in_box
            
            if not found:
                actual_box = boxes.index(prisoner) + 1
                stats["fail_list"].append((prisoner, actual_box))
                stats["paths"][prisoner] = path
                print(f"{Fore.RED}‚úñ –ü–†–û–í–ê–õ!{Style.RESET_ALL} (–ø–æ—Å–ª–µ–¥–Ω–∏–π —è—â–∏–∫: {current_box}‚Üí{number_in_box})")
                print(f"   –ü–æ–ª–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç: {' ‚Üí '.join(path)}")
                print(f"   {Fore.RED}–ù–æ–º–µ—Ä {prisoner} –±—ã–ª –≤ —è—â–∏–∫–µ {actual_box}{Style.RESET_ALL}")

        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\n{Fore.MAGENTA}‚ñÑ‚ñÑ‚ñÑ –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ‚ñÑ‚ñÑ‚ñÑ{Style.RESET_ALL}")
        print(f"üîπ –£—Å–ø–µ—à–Ω—ã—Ö: {len(stats['success'])}/{num_prisoners}")
        print(f"üîπ –ü—Ä–æ–≤–∞–ª–æ–≤: {len(stats['fail_list'])}/{num_prisoners}")
        
        if stats["fail_list"]:
            print(f"\n{Fore.RED}‚úñ –°–ø–∏—Å–æ–∫ –Ω–µ—É–¥–∞—á–Ω–∏–∫–æ–≤:{Style.RESET_ALL}")
            for prisoner, actual_box in stats["fail_list"]:
                print(f"   ‚Ä¢ –ó–∞–∫–ª. {prisoner:3d} ‚Äî –µ–≥–æ –Ω–æ–º–µ—Ä –±—ã–ª –≤ —è—â–∏–∫–µ {actual_box:3d}")
        
        if stats["success"]:
            print(f"\n{Fore.GREEN}‚òÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫:{Style.RESET_ALL}")
            print(f"   –ú–∞–∫—Å. –¥–ª–∏–Ω–∞ –ø—É—Ç–∏: {stats['max_length']} —à–∞–≥–æ–≤")
            print(f"   –ú–∏–Ω. –¥–ª–∏–Ω–∞ –ø—É—Ç–∏: {stats['min_length']} —à–∞–≥–æ–≤")
            print(f"   –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞: {sum(stats['success'])/len(stats['success']):.1f} —à–∞–≥–æ–≤")

    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥
        sys.stdout.log.close()
        sys.stdout = original_stdout
        print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ prisoners_simulation.log")

# –ó–∞–ø—É—Å–∫
full_detailed_simulation()